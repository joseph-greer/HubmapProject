
@page "/AntibodyCount"


<h1>Antibody Count</h1>


<MudDataGrid MultiSelection="true" Items="@antibodyCountInfos" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="AntibodyCountInfo" Field="Gene" />
        <Column T="AntibodyCountInfo" Field="AntibodyCount" Title="Antibody Count" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="AntibodyCountInfo" />
    </PagerContent>
</MudDataGrid>



@code {
    private IEnumerable<AntibodyCountInfo> antibodyCountInfos = Enumerable.Empty<AntibodyCountInfo>();

    protected override async Task OnInitializedAsync()
    {
        var antibodyCountProvider = new AntibodyCountProvider(@"../HubmapProject/Resources/antibody_count_unconjugated.tsv");
        antibodyCountProvider.GenerateAntibodyCountInfos();
        antibodyCountInfos = antibodyCountProvider.GetAntibodyCountInfos();
    }


    private string _searchString;
    
    // quick filter - filter gobally across multiple columns with the same input
    private Func<AntibodyCountInfo, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Gene.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.AntibodyCount}".Contains(_searchString))
            return true;

        return false;
    };
}


