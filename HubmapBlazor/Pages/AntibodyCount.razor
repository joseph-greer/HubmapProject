
@page "/AntibodyCount"

<PageTitle>Antibody Count</PageTitle>


@using HubmapProject
@using MudBlazor

<h3>Antibody Count</h3>



    <MudDataGrid MultiSelection="true" Items="@antibodyCountInfos" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Antibody Counts</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="AntibodyCountInfo" Field="Gene" />
            <Column T="AntibodyCountInfo" Field="AntibodyCount" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="AntibodyCountInfo" />
        </PagerContent>
    </MudDataGrid>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
    </div>


@code {
    private IEnumerable<AntibodyCountInfo> antibodyCountInfos = Enumerable.Empty<AntibodyCountInfo>();

    protected override async Task OnInitializedAsync()
    {
        var antibodyCountProvider = new AntibodyCountProvider(@"../HubmapProject/Resources/antibody_count_unconjugated.tsv");
        antibodyCountProvider.GenerateAntibodyCountInfos();
        antibodyCountInfos = antibodyCountProvider.GetAntibodyCountInfos();
    }


    private string? _searchString;
    private bool _sortNameByLength;
    // custom sort by name length

    private Func<AntibodyCountInfo, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Gene;
        else
            return x.Gene;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<AntibodyCountInfo, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Gene.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.AntibodyCount}".Contains(_searchString))
            return true;

        return false;
    };
}


