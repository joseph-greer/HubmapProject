@page "/BupData"


<h1>Bup Data</h1>


<MudDataGrid MultiSelection="true" Items="@bupInfos" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Bup Data</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="BupInfo" Field="UniprotAccession" Title="Accession" />
        <Column T="BupInfo" Field="UniprotName" Title="Name" />
        <Column T="BupInfo" Field="GeneDescription" Title="Description" />
        <Column T="BupInfo" Field="CommonTissue" Title="Tissue" />
        <Column T="BupInfo" Field="Dataset" />
        <Column T="BupInfo" Field="Abundance" />
        <Column T="BupInfo" Field="Rank" />
        <Column T="BupInfo" Field="NormRank" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="BupInfo" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>



@code {

    private IEnumerable<BupInfo> bupInfos = Enumerable.Empty<BupInfo>();

    protected override async Task OnInitializedAsync()
    {
        var bupInformationProvider = new BupInformationProvider(@"../HubmapProject/Resources/bup_data.csv");
        bupInformationProvider.GenerateBupInfos();
        bupInfos = bupInformationProvider.GetBupInfos();
    }

    private string _searchString;
    private bool _sortNameByLength;
    // custom sort by name length

    private Func<BupInfo, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.UniprotAccession.Length;
        else
            return x.UniprotAccession;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<BupInfo, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Dataset.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.UniprotAccession}".Contains(_searchString))
            return true;

        return false;
    };
}

