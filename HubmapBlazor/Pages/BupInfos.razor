
@page "/BottomUp/{tissue?}"
@inject NavigationManager NavigationManager
@using HubmapBlazor.Data
@inject BupService BupService

<MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>

<h1>Bottom Up</h1>


@if (tissue != null)
 {
    <h5>Unique @tissue  proteins</h5>
 }

<MudDataGrid MultiSelection="true" Items="@bupInfos" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="Bup" Field="UniprotAccession" Title="Accession" />
        <Column T="Bup" Field="UniprotName" Title="Name" />
        <Column T="Bup" Field="GeneDescription" Title="Description" />
        <Column T="Bup" Field="CommonTissue" Title="Tissue" />
        <Column T="Bup" Field="Dataset" />
        <Column T="Bup" Field="Abundance">
            <CellTemplate>
                <MudNumericField @bind-Value="@context.Abundance" Format="N2" HideSpinButtons="true" ReadOnly="true"></MudNumericField>
            </CellTemplate>
        </Column>
        <Column T="Bup" Field="Rank">
            <CellTemplate>
                <MudNumericField @bind-Value="@context.Rank" Format="N2" HideSpinButtons="true" ReadOnly="true"></MudNumericField>
            </CellTemplate>
        </Column>
        <Column T="Bup" Field="NormRank" Title="Normal Rank">
            <CellTemplate>
                <MudNumericField @bind-Value="@context.NormRank" Format="N2" HideSpinButtons="true" ReadOnly="true"></MudNumericField>
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Bup" />
    </PagerContent>
</MudDataGrid>




@code {

    [Parameter]
    public string? tissue { get; set; }



    private IEnumerable<Bup> bupInfos = Enumerable.Empty<Bup>();

    protected override async Task OnInitializedAsync()
    {
        var bups = BupService.GetBupInfos();
        bupInfos = BupService.GetAbundantBups(bups);

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).
             TryGetValue("tissue", out var _tissue))
        {
            tissue = _tissue.First();

            var accessionList = BupService.GetUniqueProteins(tissue, bupInfos);

            bupInfos = Enumerable.Empty<Bup>();

            foreach (var accession in accessionList)
            {
                var uniqueBups = BupService.GetAccessionBupInfos(accession);
                var abundantBups = BupService.GetAbundantBups(uniqueBups);
                foreach (var bup in abundantBups)
                {
                    bupInfos = bupInfos.Append(bup);
                }
            }
        }
    }

    private string _searchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<Bup, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.UniprotAccession.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.CommonTissue.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Dataset.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#"),
        @*new BreadcrumbItem("Link 1", href: "#"),*@
        new BreadcrumbItem("Bottom Up", href: null, disabled: true)
    };
}

