@page "/Proteins"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities

<MudThemeProvider />

<h1>Proteins</h1>

Tissue: @Tissue

<MudDataGrid MultiSelection="true" Items="@literatureInfos" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="LiteratureInfo" Field="Gene" />
        <Column T="LiteratureInfo" Field="Ensembl" />

        <Column T="LiteratureInfo" Field="UniprotAccession" Title="Accession">
            <CellTemplate>
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => Navigate(@context.UniprotAccession))">@context.UniprotAccession</MudIconButton>
            </CellTemplate>
        </Column>

        <Column T="LiteratureInfo" Field="GeneDescription" Title="Description" />
        <Column T="LiteratureInfo" Field="HPAEvidence" />
        <Column T="LiteratureInfo" Field="RNATissueSpecificity" Title="Specificity" />
        <Column T="LiteratureInfo" Field="RNATissueSpecificityScore" Title="Specificity Score" />
        <Column T="LiteratureInfo" Field="RNATissueSpecicNX" Title="Specific NX" />
        <Column T="LiteratureInfo" Field="UniprotName" Title="Uniprot" />
        <Column T="LiteratureInfo" Field="Mass" />
        <Column T="LiteratureInfo" Field="GOAnnotations" />
        <Column T="LiteratureInfo" Field="GeneID" />
        <Column T="LiteratureInfo" Field="PubmedCitations" />
        <Column T="LiteratureInfo" Field="AntibodyCount" />

    </Columns>
    <PagerContent>
        <MudDataGridPager T="LiteratureInfo" />
    </PagerContent>
</MudDataGrid>



@code {

    public string? Tissue { get; set; }


    private IEnumerable<LiteratureInfo> literatureInfos = Enumerable.Empty<LiteratureInfo>();

    protected override async Task OnInitializedAsync()
    {
        var literatureInfoProvider = new LiteratureInfoProvider(@"../HubmapProject/Resources/NewestLiteratureData");
        literatureInfoProvider.GenerateLiteratureInfos();
        literatureInfos = literatureInfoProvider.GetLiteratureInfos();

        var uri = NavigationManager.ToAbsoluteUri
        (NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).
    TryGetValue("tissue", out var tissue))
        {
            Tissue = tissue.First();
            var bupInformationProvider = new BupInformationProvider(@"../HubmapProject/Resources/NewBupData");
            bupInformationProvider.GenerateBupInfos();
            var bupInfos = bupInformationProvider.GetTissues(Tissue);
            var bupAccessions = bupInformationProvider.TissueAccessions(bupInfos);

            literatureInfos = literatureInfoProvider.GetTissueAccessions(bupAccessions);
        }
    }

    private string _searchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<LiteratureInfo, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Gene.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.UniprotAccession.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.GeneDescription.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.RNATissueSpecificity.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.UniprotName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    void Navigate(string accession)
    {
        NavigationManager.NavigateTo($"/BupData?accession={accession}");
    }
}
