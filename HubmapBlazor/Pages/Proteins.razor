@page "/Proteins/{Tissue?}"
@inject NavigationManager NavigationManager
@inject LiteratureProteinService LiteratureProteinService
@inject BupService BupService
@using HubmapBlazor.Data


<MudThemeProvider />

<MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>

<h1>Proteins</h1>

@if (Tissue != null)
{
    <h3>Tissue: @Tissue</h3>
}

@if (UniqueTissue != null)
{
    <h3>Unique to: @UniqueTissue</h3>
}

<MudDataGrid MultiSelection="true" Items="@literatureProteins" Sortable="true" Filterable="true" QuickFilter="@_quickFilter" >
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="LiteratureProtein" Field="Gene" />
        <Column T="LiteratureProtein" Field="Ensembl" />

        <Column T="LiteratureProtein" Field="UniprotAccession" Title="Accession">
            <CellTemplate>
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => ShowBup(@context.UniprotAccession, context.Gene))">@context.UniprotAccession</MudIconButton>
            </CellTemplate>
        </Column>

        <Column T="LiteratureProtein" Field="GeneDescription" Title="Description" />
        @*<Column T="LiteratureProtein" Field="RNATissueSpecificity" Title="Specificity" />*@
        <Column T="LiteratureProtein" Field="RNATissueSpecificityScore" Title="RNAseq Specificity Score">
            <CellTemplate>
                <MudTextField @bind-Value="@context.RNATissueSpecificityScore" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        @*<Column T="LiteratureProtein" Field="RNATissueSpecicNX" Title="Specific NX" />*@
        <Column T="LiteratureProtein" Field="Mass" Title="Mass kDa">
            <CellTemplate>
                <MudTextField @bind-Value="@context.Mass" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="GOAnnotations" Title="GO Annotations">
            <CellTemplate>
                <MudTextField @bind-Value="@context.GOAnnotations" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="PubmedCitations" Title="Pubmed Citations" InitialDirection="SortDirection.Descending">
            <CellTemplate>
                <MudTextField @bind-Value="@context.PubmedCitations" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="AntibodyCount" Title="Antibody Count">
            <CellTemplate>
                <MudTextField @bind-Value="@context.AntibodyCount" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="LiteratureProtein" />
    </PagerContent>
</MudDataGrid>



@code {

    [Parameter]
    public string? Tissue { get; set; }

    [Parameter]
    public string? UniqueTissue { get; set; }

    private IEnumerable<LiteratureProtein> literatureProteins = Enumerable.Empty<LiteratureProtein>();
    protected override async Task OnInitializedAsync()
    {

        literatureProteins = LiteratureProteinService.GetProteins();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).
        TryGetValue("tissue", out var tissue))
        {
            Tissue = tissue.First();
            var bupTissues = BupService.GetBupsWithTissue(Tissue);
            var abundantBups = BupService.GetAbundantBups(bupTissues);
            var bupAccessions = BupService.TissueAccessions(abundantBups);
            literatureProteins = LiteratureProteinService.GetTissueAccessions(bupAccessions);
        }

        if (QueryHelpers.ParseQuery(uri.Query).
        TryGetValue("UniqueTo", out var uniqueTissue))
        {
            UniqueTissue = uniqueTissue.First();

            var accessionList = BupService.GetUniqueProteins(UniqueTissue, BupService.GetAbundantBups(BupService.GetBupInfos()));

            literatureProteins = LiteratureProteinService.GetTissueAccessions(accessionList);
        }
    }


    private string _searchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<LiteratureProtein, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Gene.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.UniprotAccession.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.GeneDescription.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.RNATissueSpecificity.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.UniprotName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    void ShowBup(string accession, string gene)
    {
        NavigationManager.NavigateTo($"/Protein/{gene}/{accession}");
    }

    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Home", href: "#"),
        new BreadcrumbItem("Tissues", href: @"Tissues"),
        new BreadcrumbItem("Proteins", href: null, disabled: true)
    };
}
