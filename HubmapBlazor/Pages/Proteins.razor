@page "/Proteins/{Tissue?}"
@inject NavigationManager NavigationManager
@inject LiteratureProteinService LiteratureProteinService
@inject BupService BupService
@inject ASCTBService ASCTBService
@inject IJSRuntime JSRuntime 
@using HubmapBlazor.Data


<MudThemeProvider />

<MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>

<h1>Proteins</h1>

@if (Tissue != null)
{
    <h3>Tissue: @Tissue</h3>
}



<MudDataGrid MultiSelection="true" Items="@literatureProteins" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="LiteratureProtein" Field="Gene" />

        <Column T="LiteratureProtein" Field="UniprotAccession" Title="Accession">
            <CellTemplate>
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => ShowBup(@context.UniprotAccession, e))" @oncontextmenu="@((e) => ShowBup(@context.UniprotAccession, e))">@context.UniprotAccession</MudIconButton>
            </CellTemplate>
        </Column>

        <Column T="LiteratureProtein" Field="GeneDescription" Title="Description" />
        @*<Column T="LiteratureProtein" Field="RNATissueSpecificity" Title="Specificity" />*@
        @*<Column T="LiteratureProtein" Field="RNATissueSpecificityScore" Title="RNAseq Specificity Score">
            <CellTemplate>
                <MudTextField @bind-Value="@context.RNATissueSpecificityScore" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>*@
        @*<Column T="LiteratureProtein" Field="RNATissueSpecicNX" Title="Specific NX" />*@
        <Column T="LiteratureProtein" Field="Mass" Title="Mass (kDa)">
            <CellTemplate>
                <MudTextField @bind-Value="@context.Mass" Format="N2" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="GOAnnotations" Title="GO Annotations">
            <CellTemplate>
                <MudTextField @bind-Value="@context.GOAnnotations" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="PubmedCitations" Title="Pubmed Citations" InitialDirection="SortDirection.Descending">
            <CellTemplate>
                <MudTextField @bind-Value="@context.PubmedCitations" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="AntibodyCount" Title="Antibody Count">
            <CellTemplate>
                <MudTextField @bind-Value="@context.AntibodyCount" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="CellularLocation" Title="Location">
            <CellTemplate>
                <MudTextField Format="Typo.body2" T=string Lines="3" Text="@context.CellularLocation" ReadOnly="true" DisableUnderLine="true"></MudTextField>
            </CellTemplate>
        </Column>
        <Column T="LiteratureProtein" Field="ASCTB_Tissues" Title="ASCT+B Tissues">
            <CellTemplate>
                @foreach (var tissue in context.ASCTB_Tissues.Split(", "))
                {
                    if (tissue != "NA")
                    {
                        <MudLink Href=@ASCTBService.GetLink(tissue) Target="_blank">@tissue</MudLink>
                        <h6> </h6>
                    }
                }
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="LiteratureProtein" />
    </PagerContent>
</MudDataGrid>



@code {

    [Parameter]
    public string? Tissue { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnShowBup { get; set; }


    [Parameter]
    public string? Accession { get; set; }

    private IEnumerable<LiteratureProtein> literatureProteins = Enumerable.Empty<LiteratureProtein>();
    protected override async Task OnInitializedAsync()
    {

        literatureProteins = LiteratureProteinService.GetProteins();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).
        TryGetValue("tissue", out var tissue))
        {
            Tissue = tissue.First();
            var bupTissues = BupService.GetBupsWithTissue(Tissue);
            var abundantBups = BupService.GetAbundantBups(bupTissues);
            var bupAccessions = BupService.GetAccessions(abundantBups);
            literatureProteins = LiteratureProteinService.GetTissueAccessions(bupAccessions);
        }
    }


    private string _searchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<LiteratureProtein, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Gene.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.UniprotAccession.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.GeneDescription.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.RNATissueSpecificity.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.UniprotName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ASCTB_Tissues.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    private void ShowBup(string accession, MouseEventArgs e)
    {
        
        if (e.CtrlKey)
        {
            
            JSRuntime.InvokeAsync<object>("open", $"/Protein/{accession}", "_blank");
        }
        else
        {
            NavigationManager.NavigateTo($"/Protein/{accession}");
        }
    }


    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#"),
        new BreadcrumbItem("Tissues", href: @"Tissues"),
        new BreadcrumbItem("Proteins", href: null, disabled: true)
    };
    }