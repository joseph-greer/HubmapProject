@page "/Protein/{Gene}/{Accession}/{Ensembl}"
@inject BupService BupService
@inject AntibodyService AntibodyService
@inject LiteratureProteinService LiteratureProteinService
@using HubmapBlazor.Data

<MudThemeProvider />

<MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>

<h1>
    Protein @Accession
</h1>

@if (ProteinBupInfos.Any())
{
    <h5>
        @*Name: @ProteinBupInfos.First().UniprotName*@
        @*<MudSpacer></MudSpacer>*@
        @*Description: @ProteinBupInfos.First().GeneDescription*@
    </h5>
}

<MudLink Href=@($"https://www.uniprot.org/uniprot/{Accession}") Target="_blank">Uniprot Website</MudLink>
<MudSpacer></MudSpacer>

@if (ProteinBupInfos.Count() != 0)
{

    <MudLink Href=@($"https://www.proteinatlas.org/{Ensembl}") Target="_blank">Human Protein Atlas</MudLink>

    <MudDataGrid Items="@ProteinBupInfos" Sortable="true" Filterable="true" RowsPerPage="5" QuickFilter="@_BupFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Bottom Up</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_BupSearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T=Bup Field="CommonTissue" Title="Tissue" />
            <Column T=Bup Field="Dataset" />
            <Column T=Bup Field="NormRank" Title="Normalized Rank" InitialDirection="SortDirection.Descending">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.NormRank" Format="N2" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            <Column T=Bup Field="Rank">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.Rank" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            <Column T=Bup Field="Abundance">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.Abundance" Format="E2" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Bup" />
        </PagerContent>
    </MudDataGrid>
}
else
{
    <h6>No Bottom Up data</h6>
}

@if (Antibodies.Count() != 0)
{
    <MudDataGrid Items="@Antibodies" Sortable="true" Filterable="true" RowsPerPage="5" QuickFilter="@_AntibodyFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Antibodies</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_AntibodySearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="Antibody" Field="AntibodyID" Title="ID">
                <CellTemplate>
                    <MudLink Href=@($"https://antibodyregistry.org/search?q={@context.AntibodyID}") Target="_blank">@context.AntibodyID</MudLink>
                </CellTemplate>
            </Column>
            @*<Column T="Antibody" Field="AntibodyName" Title="Name" />*@
            <Column T="Antibody" Title="Name">
                <CellTemplate>
                    <MudTextField T=string Lines="5" Text="@context.AntibodyName" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            @*<Column T="Antibody" Field="TargetAntigen" />*@
            <Column T="Antibody" Title="Target Antigen">
                <CellTemplate>
                    <MudTextField T=string Lines="5" Text="@context.TargetAntigen" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            @*<Column T="Antibody" Field="Clonality" />*@
            <Column T="Antibody" Field="Reference" />
            <Column T="Antibody" Field="CloneID" Title="Clone ID"/>
            <Column T="Antibody" Field="HostOrganism" Title="Host Organism" />
            <Column T="Antibody" Field="Vendor" />
            <Column T="Antibody" Field="CatNum" Title="Cat Num"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Antibody" />
        </PagerContent>
    </MudDataGrid>
}
else
{
    <h6>No Antibodies</h6>
}

@code {

    [Parameter]
    public string? Accession { get; set; }

    [Parameter]
    public string? Gene { get; set; }

    [Parameter]
    public string? Ensembl { get; set; }

    private IEnumerable<Bup> ProteinBupInfos = Enumerable.Empty<Bup>();
    private IEnumerable<Antibody> Antibodies = Enumerable.Empty<Antibody>();

    protected override async Task OnInitializedAsync()
    {
        var BupInfos = BupService.GetAccessionBupInfos(Accession);
        ProteinBupInfos = BupService.GetAbundantBups(BupInfos);

        Antibodies = AntibodyService.GetAntibodyGene(Gene);

    }


    private string _BupSearchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<Bup, bool> _BupFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_BupSearchString))
            return true;
        if (x.CommonTissue.Contains(_BupSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Dataset.Contains(_BupSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };


    private string _AntibodySearchString;

    private Func<Antibody, bool> _AntibodyFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_AntibodySearchString))
            return true;
        if (x.AntibodyID.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.AntibodyName.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.TargetAntigen.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Clonality.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Reference.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.CloneID.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.HostOrganism.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Vendor.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.CatNum.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Home", href: "#"),
        new BreadcrumbItem("Tissues", href: @"Tissues"),
        new BreadcrumbItem("Proteins", href: @"Proteins"),
        new BreadcrumbItem("Protein", href: null, disabled: true)
    };

}

