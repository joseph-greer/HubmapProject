@page "/Protein/{Accession}"
@inject BupService BupService
@inject AntibodyService AntibodyService
@inject LiteratureProteinService LiteratureProteinService
@inject ASCTBService ASCTBService
@inject AntibodyDrugService AntibodyDrugService
@using HubmapBlazor.Data

<MudThemeProvider />

<MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>

<h1>
    Protein @Accession
</h1>

@if (ProteinTissueBupInfos.Any())
{
    <h5>
        Name: @ProteinTissueBupInfos.First().UniprotName
        <MudSpacer></MudSpacer>
        Description: @ProteinTissueBupInfos.First().GeneDescription
    </h5>
}
else if (ProteinCellLineBupInfos.Any())
{
    <h5>
        Name: @ProteinCellLineBupInfos.First().UniprotName
        <MudSpacer></MudSpacer>
        Description: @ProteinCellLineBupInfos.First().GeneDescription
    </h5>
}

<MudLink Href=@($"https://www.uniprot.org/uniprot/{Accession}") Target="_blank">Uniprot Website</MudLink>
<MudSpacer></MudSpacer>
<MudLink Href=@($"https://www.proteinatlas.org/{ProteinLiterature.Ensembl}") Target="_blank">Human Protein Atlas</MudLink>

@if (ProteinTissueBupInfos.Count() != 0)
{
    <MudDataGrid Items="@ProteinTissueBupInfos" Sortable="true" Filterable="true" RowsPerPage="5" QuickFilter="@_BupFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Tissue Bottom Up</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_BupSearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T=TissueBottomUp Field="CommonTissue" Title="Tissue" />
            <Column T=TissueBottomUp Field="Dataset" />
            <Column T=TissueBottomUp Field="NormRank" Title="Normalized Rank" InitialDirection="SortDirection.Descending">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.NormRank" Format="N2" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            <Column T=TissueBottomUp Field="Rank">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.Rank" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            <Column T=TissueBottomUp Field="Abundance">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.Abundance" Format="E2" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="TissueBottomUp" />
        </PagerContent>
    </MudDataGrid>
}
@if (ProteinCellLineBupInfos.Count() != 0)
{
    <MudDataGrid Items="@ProteinCellLineBupInfos" Sortable="true" Filterable="true" RowsPerPage="5" QuickFilter="@_cellLineBupFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Cell Line Bottom Up</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_cellLineBupSearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T=CellLineBottomUp Field="CellLine" Title="Cell Line" />
            <Column T=CellLineBottomUp Field="Dataset" />
            <Column T=CellLineBottomUp Field="NormRank" Title="Normalized Rank" InitialDirection="SortDirection.Descending">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.NormRank" Format="N2" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            <Column T=CellLineBottomUp Field="Rank">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.Rank" Format="N0" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            <Column T=CellLineBottomUp Field="Abundance">
                <CellTemplate>
                    <MudTextField @bind-Value="@context.Abundance" Format="E2" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="CellLineBottomUp" />
        </PagerContent>
    </MudDataGrid>
}
@if (ProteinTissueBupInfos.Count() == 0 && ProteinCellLineBupInfos.Count() == 0)
{
    <h5>No Bottom Up data</h5>
}
<br />
<br />
@if (Antibodies.Count() != 0)
{
    <MudDataGrid Items="@Antibodies" Sortable="true" Filterable="true" RowsPerPage="5" QuickFilter="@_AntibodyFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Antibodies</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_AntibodySearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="Antibody" Field="AntibodyID" Title="ID">
                <CellTemplate>
                    <MudLink Href=@($"https://antibodyregistry.org/search?q={@context.AntibodyID}") Target="_blank">@context.AntibodyID</MudLink>
                </CellTemplate>
            </Column>
            @*<Column T="Antibody" Field="AntibodyName" Title="Name" />*@
            <Column T="Antibody" Title="Name">
                <CellTemplate>
                    <MudTextField T=string Lines="5" Text="@context.AntibodyName" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            @*<Column T="Antibody" Field="TargetAntigen" />*@
            <Column T="Antibody" Title="Target Antigen">
                <CellTemplate>
                    <MudTextField T=string Lines="5" Text="@context.TargetAntigen" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            @*<Column T="Antibody" Field="Clonality" />*@
            <Column T="Antibody" Title="Reference">
                <CellTemplate>
                    <MudTextField Format="Typo.body2" T=string Lines="5" Text="@context.Reference" ReadOnly="true" DisableUnderLine="true"></MudTextField>
                </CellTemplate>
            </Column>
            <Column T="Antibody" Field="CloneID" Title="Clone ID" />
            <Column T="Antibody" Field="HostOrganism" Title="Host Organism" />
            <Column T="Antibody" Field="Vendor" />
            <Column T="Antibody" Field="CatNum" Title="Cat Num" />
            <Column T="Antibody" Field="RefCount" Title="Reference Count" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Antibody" />
        </PagerContent>
    </MudDataGrid>
}
else
{
    <h5>No Antibodies</h5>
}

@if (AntibodyDrugs.Count() != 0)
{
    <br />
    <br />
    <MudDataGrid Items="@AntibodyDrugs" Sortable="true" Filterable="true" RowsPerPage="5">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Antibody Therapies</MudText>
            <MudSpacer />
        </ToolBarContent>
        <Columns>
            <Column T="AntibodyDrug" Field="InternationalName" Title="Non-Proprietary Name" />
            <Column T="AntibodyDrug" Field="BrandName" Title="Brand Name" />
            <Column T="AntibodyDrug" Field="TargetAntigen" Title="Target" />
            <Column T="AntibodyDrug" Field="Indication" Title="First Indication" />
        </Columns>
    </MudDataGrid>
}

@if (ASCTBs.Count() != 0)
{
    <br />
    <br />
    <h6>
        @ProteinLiterature.HGNC
        <br />
        ASCT+B Uberons: @ProteinLiterature.ASCT_Uberon
    </h6>

    <MudDataGrid Items="@ASCTBs" Sortable="true" Filterable="true" RowsPerPage="5">
        <ToolBarContent>
            <MudText Typo="Typo.h6">ASCT+B</MudText>
            <MudSpacer />
        </ToolBarContent>
        <Columns>
            <Column T="ASCTB" Field="Organ" Title="Tissue" />
            <Column T="ASCTB" Field="Table">
                <CellTemplate>
                    <MudLink Href=@($"{@context.Tablr}") Target="_blank">HuBMAP ASCT+B Table</MudLink>
                </CellTemplate>
            </Column>
            <Column T="ASCTB" Field="Reporter">
                <CellTemplate>
                    <MudLink Href=@($"{@context.Reporter}") Target="_blank">HuBMAP ASCT+B Reporter</MudLink>
                </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>
}

@code {

    [Parameter]
    public string? Accession { get; set; }

    [Parameter]
    public LiteratureProtein? ProteinLiterature { get; set; }

    private IEnumerable<TissueBottomUp> ProteinTissueBupInfos = Enumerable.Empty<TissueBottomUp>();
    private IEnumerable<CellLineBottomUp> ProteinCellLineBupInfos = Enumerable.Empty<CellLineBottomUp>();
    private IEnumerable<Antibody> Antibodies = Enumerable.Empty<Antibody>();
    private IEnumerable<ASCTB> ASCTBs = Enumerable.Empty<ASCTB>();
    private IEnumerable<AntibodyDrug> AntibodyDrugs = Enumerable.Empty<AntibodyDrug>();

    protected override async Task OnInitializedAsync()
    {
        var tissueBupInfos = BupService.GetAccessionTissueBupInfos(Accession);
        ProteinTissueBupInfos = BupService.GetAbundantTissueBups(tissueBupInfos);

        var cellLineBupInfos = BupService.GetAccessionCellLineBupInfos(Accession);
        ProteinCellLineBupInfos = BupService.GetAbundantCellLineBups(cellLineBupInfos);

        ProteinLiterature = LiteratureProteinService.GetProtein(Accession);
        Antibodies = AntibodyService.GetAntibodyGene(ProteinLiterature.Gene);
        ASCTBs = ASCTBService.GetTissues(ProteinLiterature.ASCTB_Tissues);
        AntibodyDrugs = AntibodyDrugService.GetAntibodyDrug(Accession);
    }

    private string _BupSearchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<TissueBottomUp, bool> _BupFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_BupSearchString))
            return true;
        if (x.CommonTissue.Contains(_BupSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Dataset.Contains(_BupSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private string _cellLineBupSearchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<CellLineBottomUp, bool> _cellLineBupFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_cellLineBupSearchString))
            return true;
        if (x.CellLine.Contains(_cellLineBupSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Dataset.Contains(_cellLineBupSearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };


    private string _AntibodySearchString;

    private Func<Antibody, bool> _AntibodyFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_AntibodySearchString))
            return true;
        if (x.AntibodyID.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.AntibodyName.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.TargetAntigen.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Clonality.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Reference.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.CloneID.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.HostOrganism.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Vendor.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.CatNum.Contains(_AntibodySearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Home", href: "#"),
        new BreadcrumbItem("Tissues", href: @"Tissues"),
        new BreadcrumbItem("Proteins", href: @"Proteins"),
        new BreadcrumbItem("Protein", href: null, disabled: true)
    };

}

